import os
import re
from glob import glob
from math import log

import pandas as pd
import seaborn as sb
from Bio import SeqIO
from matplotlib import pyplot as plt
from matplotlib_venn import venn2

# for visual settings and compatibility with adobe illustrator
import plot_params
from general_params_glycFDR import database, out, tables

# from general_params import database, out, tables

# generated by 2_data_exploration/2_glycoSites_clustering.py
tsv_path_1 = os.path.join(out, 'tables/psm_glyco.tsv')
tsv_path_2 = os.path.join(out, 'protein_glycosylation//mappings.tsv')

ann = pd.read_csv(tables['annotation'], sep='\t', header=0)
ann = ann[ann['HLA Class'] == 2]
ann['Sample Type'] = ann['Sample Type'].str.replace(
    'Tumor infiltrating lymphocytes', 'TILs')
ann['Disease'] = ann['Disease'].str.replace(
    'EBV transformed lymphoblastoid cell line', 'EBV TLCL')

tsv_files = glob(os.path.join(out, 'protein_glycosylation/*.csv'))
df_list = []
for tsv_path in tsv_files:
    source = os.path.basename(tsv_path).rsplit('.', 1)[0].rsplit('_', 1)[-1]
    temp = pd.read_csv(tsv_path, sep=',', header=0, low_memory=False)
    temp['source'] = source
    df_list.append(temp)

df_prots = pd.concat(df_list)
df_prots = df_prots[df_prots['glycosylation_type'] == 'N-linked'].copy(
    deep=True)
df_prots['uniprotkb_canonical_ac 2'] = df_prots[
    'uniprotkb_canonical_ac'].str.replace('-[0-9]+$', '', regex=True)
df_prots['uniprotkb_canonical_ac 2'].drop_duplicates().to_csv(os.path.join(
    out, 'protein_glycosylation/to_map.csv'),
                                                              sep='\t',
                                                              header=False,
                                                              index=False)

pep = pd.read_csv(tables['peptide'], sep='\t', header=0)
psm_glyco = pd.read_csv(tsv_path_1, sep='\t', header=0, low_memory=False)
mappings = pd.read_csv(tsv_path_2, sep='\t', header=0, low_memory=False)
mappings.columns = ['uniprotkb_canonical_ac 2', 'Entry Name']
df_prots = df_prots.merge(mappings)
df_prots.dropna(subset=['glycosylation_site_uniprotkb'], inplace=True)
df_prots['Glyco site'] = df_prots['Entry Name'] + '_' + df_prots[
    'glycosylation_site_uniprotkb'].astype(int).astype(str)

psm_glyco['isProtein GlycoSite'] = psm_glyco['Glyco site'].isin(
    df_prots['Glyco site'].unique())

psm_glyco['isGlycoProtein'] = psm_glyco['Entry Name'].isin(
    df_prots['Entry Name'].unique())

df_prots.to_csv(os.path.join(
    out, 'protein_glycosylation/processed_protein_sites.tsv'),
                sep='\t',
                header=True,
                index=False)


def xor(row):
    if row['isProtein GlycoSite']:
        return 'Glycosylated site'
    elif row['isGlycoProtein']:
        return 'Glycosylated protein'
    return 'Unseen glycosylation'


psm_glyco['glycosylation status'] = psm_glyco.apply(xor, axis=1)

psm_glyco['File'] = psm_glyco.Spectrum.str.rsplit('.', 3,
                                                  expand=True)[0] + '.mzML'

if any(psm_glyco['Study'].str.contains('_glycFDR')):
    ann['Study'] = ann['Study'] + '_glycFDR'

psm_glyco = psm_glyco.merge(ann)

psm_glyco = psm_glyco[~psm_glyco['Entry Name'].str.contains('rev_')]
pep = pep[~pep['Entry Name'].str.contains('rev_')]

psm_glyco = psm_glyco[psm_glyco['Glycan q-value'] <= 0.05]

fig, axes = plt.subplots(1, 3, figsize=(7, 1.2), constrained_layout=True)

# colors used in adobe illustrator
colors = ['#6c757d', '#212529', '#adb5bd']

# plot proportions of seen / unseen glycosylation sites
ax = axes[0]
df_plot_1 = psm_glyco['glycosylation status'].value_counts()
ax.pie(df_plot_1.values,
       explode=[0, 0.05, 0.1],
       autopct='%1.1f%%',
       radius=1,
       colors=['gray', '#294c60', 'black'],
       wedgeprops={
           'linewidth': 0.5,
           'edgecolor': 'white'
       })

# making percentage values text white
for text in ax.texts:
    if '%' in text.get_text():
        text.set_color('w')

ax.set_title('PSMs')

ax = axes[1]

# remove peptides from psm table that didn't make it to the peptide.tsv table
psm_pep_glyco = psm_glyco.groupby('Study').apply(
    lambda x: x[x.Peptide.isin(pep[pep.Study == x.name].Peptide.unique())])

df_plot_1 = psm_glyco.drop_duplicates(
    "Peptide")['glycosylation status'].value_counts()
ax.pie(df_plot_1.values,
       explode=[0, 0.05, 0.1],
       autopct='%1.1f%%',
       radius=1,
       colors=['gray', '#294c60', 'black'],
       wedgeprops={
           'linewidth': 0.5,
           'edgecolor': 'white'
       })

# making percentage values text white
for text in ax.texts:
    if '%' in text.get_text():
        text.set_color('w')

ax.set_title('Peptides')

# glyco site level
ax = axes[2]
df_plot_1 = psm_glyco.drop_duplicates(
    "Glyco site")['glycosylation status'].value_counts()

ax.pie(df_plot_1.values,
       explode=[0, 0.05, 0.1],
       autopct='%1.1f%%',
       radius=1,
       colors=['gray', '#294c60', 'black'],
       wedgeprops={
           'linewidth': 0.5,
           'edgecolor': 'white'
       })

plt.legend(df_plot_1.index, loc="right")
# df_plot_1 = psm_glyco.drop_duplicates(
#     "Glyco site")['glycosylation status'].value_counts()
# df_plot_1.plot(kind='pie',
#                ax=ax,
#                explode=[0, 0.1, 0.1],
#                startangle=290,
#                colors=[colors[1]],
#                autopct='%1.1f%%')
# ax.set_ylabel("")
# ax.set_xlabel("")
# making percentage values text white
for text in ax.texts:
    if '%' in text.get_text():
        text.set_color('w')

ax.set_title('Glycosylation sites')

plt.savefig(os.path.join(out, 'plots/figure_2/panel_glycosites-piecharts.pdf'),
            transparent=True)

fig, axes = plt.subplots(1, 3, figsize=(4, 1.2), constrained_layout=True)

cols_order = [
    "Glycosylated site", "Glycosylated protein", "Unseen glycosylation"
]

axes = axes.flatten()
ax = axes[0]
# explore Glyco PSM qualities for site not found in proteomics
df_plot2 = psm_glyco.groupby("glycosylation status").apply(
    lambda x: x['Glycan Score']).unstack(level=0)

bplot1 = ax.boxplot(
    [df_plot2[col].dropna().values for col in cols_order],
    notch=True,  # notch shape
    vert=True,  # vertical box alignment
    patch_artist=True,  # fill with color
    showfliers=False)

ax.set_ylabel("Glycan score")

ax = axes[1]
# explore spectral count per glycosylation status
df_plot3 = psm_glyco.groupby('glycosylation status').apply(
    lambda x: x.groupby('Glyco site')['Spectrum'].nunique()).unstack(level=0)

bplot2 = ax.boxplot(
    [df_plot3[col].dropna().values for col in cols_order],
    notch=True,  # notch shape
    vert=True,  # vertical box alignment
    patch_artist=True,  # fill with color
    showfliers=False)

ax.set_ylabel("spectral count")

ax = axes[2]
# explore glycan q-value per glycosylation status
df_plot4 = psm_glyco.groupby("glycosylation status").apply(
    lambda x: x['Glycan q-value']).unstack(level=0)

bplot3 = ax.boxplot(
    [df_plot4[col].dropna().values for col in cols_order],
    notch=True,  # notch shape
    vert=True,  # vertical box alignment
    patch_artist=True,  # fill with color
    showfliers=False)

ax.set_ylabel("Glycan q-value")
ax.set_ylim(0, 1)

colors = ['gray', '#294c60', 'black']
for bplot in (bplot1, bplot2, bplot3):
    box_index = 0
    for patch, color in zip(bplot['boxes'], colors):
        patch.set_facecolor(color)
        patch.set_color(color)
        for line, cap, median in zip(bplot['whiskers'], bplot['caps'],
                                     bplot['medians']):
            line.set_color(colors[box_index])
            cap.set_color(colors[box_index])
            median.set_color('white')
        box_index += 1

plt.savefig(os.path.join(out, 'plots/figure_2/panel_glycosites-boxplots.pdf'),
            transparent=True)

psm_glyco.to_csv(os.path.join(out, 'tables/glycosites.tsv'),
                 sep='\t',
                 header=True,
                 index=False)
