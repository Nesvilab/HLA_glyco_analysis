import os
from collections import defaultdict

import logomaker as lm
import pandas as pd
import scipy.stats as stats
import seaborn as sns
from matplotlib import pyplot as plt
from matplotlib_venn import venn2

# for visual settings and compatibility with adobe illustrator
import plot_params
# from general_params_2dfdr import out, tables
from general_params_glycFDR import out, tables
from helper_functions import get_hla_binding


def highlight_motif(ax):
    xticks = ax.get_xticklabels()
    highlight_colors = []
    for i in xticks:
        if i._x >= 0 and i._x < 9:
            highlight_colors.append("#E71D36")
        else:
            highlight_colors.append("black")
    for xtick, color in zip(ax.get_xticklabels(), highlight_colors):
        xtick.set_color(color)
    for xtick, color in zip(ax.get_xticklines(), highlight_colors):
        xtick.set_color(color)


# generated by './figure_2_glycosites.py'
tsv_path_1 = os.path.join(out, 'tables/glycosites.tsv')

# reading tables for all studies
psm_glyco = pd.read_csv(tsv_path_1, sep='\t', header=0, low_memory=False)
psm_glyco = psm_glyco[psm_glyco.Study == 'Purcell_2021_PXD025877_glycFDR']
psm_glyco = psm_glyco[psm_glyco['Glycan q-value'] <= 0.05]

# psm = pd.read_csv(tables['psm'], sep='\t', header=0, low_memory=False)

# reading tables for Purcell_20210_PXD025877
psm = pd.read_csv(tables['Purcell_20210_PXD025877'], sep='\t', header=0)
psm['Study'] = 'Purcell_2021_PXD025877_glycFDR'

ann = pd.read_csv(tables['annotation'], sep='\t', header=0)
ann = ann[ann['HLA Class'] == 2]

if any(psm['Study'].str.contains('_glycFDR')):
    ann['Study'] = ann['Study'] + '_glycFDR'

psm = psm[~psm['Entry Name'].str.contains('rev_')]

psm['File'] = psm.Spectrum.str.rsplit('.', 3, expand=True)[0] + '.mzML'
psm = psm.merge(ann)

# information about the mono-allelic cell lines
#
# C1R_DR  DRA1*01:02;DRB1*12:01:01;DRB3*02:02:01
# C1R_DQ                DQA1*05:05;DQB1*03:01:01
# C1R_DP     DPB1*04:01:01;DPA1*02:01;DPA1*02:02

subject_alleles = {
    "C1R_DP": "HLA-DPA10201-DPB10401,HLA-DPA10202-DPB10401",
    "C1R_DQ": "HLA-DQA10505-DQB10301",
    "C1R_DR": "DRB1_1201,DRB3_0202"
}

# calculate binding affinities

# uncomment to generate C1R_bindigns.tsv
#
# df_list = []
# for subject, alleles in subject_alleles.items():
#     peps = psm[psm["Subject"] == subject].Peptide
#     peps = list(peps[peps.str.len() >= 9].unique())
#     temp = get_hla_binding(peps, alleles)
#     temp['Subject'] = subject
#     df_list.append(temp)
#
# df_bindings = pd.concat(df_list)
#
## help function
# def get_binding_type(rank):
#     if rank < 20:
#         return "Non-trash"
#     return "Trash"
#
#
#
# # add trash non-trash column
# df_bindings['Binding Type'] = df_bindings.Rank.map(get_binding_type)
# df_bindings.to_csv(os.path.join(out, 'tables/C1R_bindigns.tsv'),
#                    sep='\t',
#                    header=True,
#                    index=False)
#
#############################################\

df_bindings = pd.read_csv(os.path.join(out, 'tables/C1R_bindigns.tsv'),
                          sep='\t',
                          header=0)

# merge NetMHCIIpan results with the glycosylation information
temp = psm_glyco.groupby(
    ['Subject', 'Peptide', 'Glyco site',
     'glycosylation status'])['Spectrum'].nunique()

temp.name = 'Spectral count'
temp = temp.reset_index()

df_bindings_glyco = df_bindings.merge(temp)

# keep 1 peptide per subject (keep lowest Rank ==> best binder)
df_bindings_glyco = df_bindings_glyco.sort_values('Rank').drop_duplicates(
    ["Peptide", "Subject", "Glyco site"], keep="first")

temp = df_bindings[[
    'Peptide', 'Core', 'Rank', 'Subject', 'Binding Type', 'Allele'
]].sort_values('Rank').drop_duplicates(['Peptide', 'Subject'], keep='first')

df_bindings_glyco = psm_glyco.merge(temp)
df_bindings_glyco['Core start'] = df_bindings_glyco.apply(
    lambda x: x.Peptide.index(x.Core), axis=1) + 1

df_bindings_glyco['Glyco position within motif'] = df_bindings_glyco[
    'Glyco Position'] - df_bindings_glyco['Core start']

rel_pep = df_bindings_glyco.groupby('Allele').apply(
    lambda x: x.drop_duplicates('Peptide').groupby(
        'Glyco position within motif').agg({
            'glycosylation status':
            'value_counts'
        }).unstack(level=1))

rel_psm = df_bindings_glyco.groupby('Allele').apply(lambda x: x.groupby(
    'Glyco position within motif').agg({
        'glycosylation status': 'value_counts'
    }).unstack(level=1))

rel_psm.columns = rel_psm.columns.map(lambda x: x[1])
rel_pep.columns = rel_pep.columns.map(lambda x: x[1])

fig, axes = plt.subplots(6,
                         3,
                         figsize=(6, 6.5),
                         constrained_layout=True,
                         sharex=True)
axes = axes.flatten(order='F')

ax_index = 0
for allele, sdf in rel_pep.groupby('Allele'):
    # plot motif
    ax = axes[ax_index]
    ax.set_title(allele, fontsize=8)
    sdf1 = df_bindings_glyco[df_bindings_glyco.Allele == allele]
    sdf2 = df_bindings[(df_bindings['Binding Type'] == 'Non-trash')
                       & (df_bindings.Allele == allele)]
    # generate matrix for the motif plot
    d = defaultdict(lambda: [0] * 9)  # d[char] = [pos0, pos12, ...]
    sequences = list(sdf2.drop_duplicates('Peptide')['Core'])
    for seq in sequences:
        for i, char in enumerate(seq):
            d[char][i] += 1
    count_mat = pd.DataFrame(d)
    count_mat.index.names = ["pos"]
    info_mat = lm.transform_matrix(count_mat,
                                   from_type='counts',
                                   to_type='information')
    plot = lm.Logo(info_mat, ax=ax)
    ax.set_title(allele, fontsize=8)
    ax.set_ylabel('information (bits)')
    ax_index += 1
    ax = axes[ax_index]
    df_plot1 = rel_pep.loc[allele]  # .apply(lambda x: x / x.sum())
    df_plot1 = df_plot1.sort_index()
    df_plot1.index = df_plot1.index.astype(int)
    labels = df_plot1.index.tolist()
    df_plot1.fillna(0, inplace=True)
    A = df_plot1['Glycosylated site'].values
    B = df_plot1['Glycosylated protein'].values
    C = df_plot1['Unseen glycosylation'].values
    ax.bar(labels, A, label='Glycosylated site', color='gray')
    ax.bar(labels, B, bottom=A, label='Glycosylated protein', color='#294c60')
    ax.bar(labels,
           C,
           bottom=A + B,
           label='Unseen glycosylation',
           color='black')
    ax.set_ylabel('Peptide count')
    ax_index += 1
    ax = axes[ax_index]
    df_plot3 = sdf1.groupby('Glyco position within motif').apply(
        lambda x: x.drop_duplicates('Peptide')['Binding Type'].value_counts(
        )).unstack(level=1)
    df_plot3 = df_plot3.sort_index()
    df_plot3.index = df_plot1.index.astype(int)
    df_plot3.fillna(0, inplace=True)
    labels = df_plot3.index.tolist()
    A = df_plot3['Non-trash'].values
    B = df_plot3['Trash'].values
    ax.bar(labels, A, label='Binders', color='green')
    ax.bar(labels, B, bottom=A, label='Trash', color='red')
    ax.set_xticklabels(ax.get_xticklabels(), rotation=90)
    ax.set_ylabel('NetMHCIIpan 4.1')
    ax.legend()
    ax_index += 1

min_val = int(df_bindings_glyco['Glyco position within motif'].min())
max_val = int(df_bindings_glyco['Glyco position within motif'].max())
axes[-1].set_xlim(min_val - 0.5, max_val)
axes[-1].set_xticks(range(min_val, max_val))
ticklabels = [str(x) if x % 2 == 0 else '' for x in range(min_val, max_val)]

for ax_index_ in range(1, 15, 3):
    for ax_index in [ax_index_, ax_index_ + 1]:
        axes[ax_index].tick_params(labelbottom=True)
        axes[ax_index].set_xticklabels(ticklabels, fontsize=8, rotation=90)
        highlight_motif(axes[ax_index])
        axes[ax_index].set_ylabel('Peptide count')
        axes[ax_index].set_xlabel('Glycosylation relative position')

for ax_index in range(0, 15, 3):
    axes[ax_index].axes.get_xaxis().set_visible(False)
    axes[ax_index].set_ylabel('Bits')

plt.savefig(os.path.join(out, 'plots/figure_2/panel_binding.pdf'),
            transparent=True)

# creating data
eliminated_glycopeptides = psm[psm['Glycan Score'] > 0.2].Peptide.unique()
temp['glycosylated'] = temp.Peptide.isin(psm_glyco.Peptide)
temp = temp[~temp.Peptide.isin(eliminated_glycopeptides)]
data = temp.groupby('glycosylated').agg({
    'Binding Type': 'value_counts'
}).unstack(level=1)

data.index.name = ''
data.index = data.index.map({True: 'Glycosylated', False: 'Non glycosylated'})
data.columns = data.columns.map(lambda x: x[1])
data = data.loc[['Glycosylated', 'Non glycosylated'], ['Non-trash', 'Trash']]

# performing fishers exact test on the data
# H0: glycoyslation status and HLA binding are independent
# H1: glycoyslation status and HLA binding are not independent
odd_ratio, p_value = stats.fisher_exact(data)
print('odd ratio is : ' + str(odd_ratio))
print('p_value is : ' + str(p_value))

### without glycan q-value filter ###
# odd ratio is : 0.6240041618489378
# p_value is : 9.301355776889965e-11
# >>> round(data.apply(lambda x: x / x.sum(), axis=1) * 100, 2)
#                   Non-trash  Trash
#
# Glycosylated          73.37  26.63
# Non glycosylated      81.53  18.47

### with glycan q-value < 0.2 ###

# odd ratio is : 0.7917920937203984
# p_value is : 0.01252614432581562
#
# >>> round(data.apply(lambda x: x / x.sum(), axis=1) * 100, 2)
#                   Non-trash  Trash
#
# Glycosylated          77.65  22.35
# Non glycosylated      81.44  18.56

### with glycan q-value < 0.05 ###
# >>> round(data.apply(lambda x: x / x.sum(), axis=1) * 100, 2)
#                   Non-trash  Trash
#
# Glycosylated          79.29  20.71
# Non glycosylated      81.42  18.58
#
# odd ratio is : 0.8739528616898713
# p_value is : 0.4880335804521339

# yapf: disable
df_bindings_psm = psm.merge(temp.drop(['glycosylated'], axis=1))
comp_motif = df_bindings_psm.groupby('Sample Name').apply(lambda x:
        pd.concat([
            x[x['Glycan q-value'].isnull()].drop_duplicates('Spectrum')['Binding Type'].value_counts(),
            x[x['Glycan q-value'] <= 0.2].drop_duplicates('Spectrum')['Binding Type'].value_counts(),
            x[x['Glycan q-value'].isnull()].drop_duplicates('Peptide')['Binding Type'].value_counts(),
            x[(x['Glycan q-value'] <= 0.2) ].drop_duplicates('Peptide')['Binding Type'].value_counts()
        ], axis=1)
                                                        )

# yapf: enable
from scipy import stats

comp_motif.columns = ['PSM', 'Glyco PSM', 'Peptide', 'Glyco peptide']
comp_motif.fillna(0, inplace=True)
comp_motif_stat = comp_motif[['Peptide', 'Glyco peptide']].fillna(0).groupby(
    'Sample Name').apply(lambda x: stats.fisher_exact(x)).apply(pd.Series)

comp_motif_stat.columns = ['oddRatio', 'p-value']
comp_motif_stat['H0'] = (comp_motif_stat['p-value'] > 0.05).map({
    True:
    'Not rejected',
    False:
    'Rejected'
})

### with q-value filter of 0.2 ###
# >>> comp_motif_stat
#                    oddRatio   p-value            H0
# Sample Name
# C1R_DPrep1_HLA-II  0.303148  0.102250  Not rejected
# C1R_DPrep2_HLA-II  0.000000  0.008177      Rejected
# C1R_DPrep3_HLA-II  0.807843  0.832670  Not rejected
# C1R_DPrep4_HLA-II  0.285543  0.075069  Not rejected
# C1R_DPrep5_HLA-II  0.428571  0.178689  Not rejected
# C1R_DQrep1_HLA-II  5.105442  0.005009      Rejected
# C1R_DQrep2_HLA-II  1.710405  0.310374  Not rejected
# C1R_DQrep3_HLA-II  1.576042  0.637127  Not rejected
# C1R_DQrep4_HLA-II  6.562500  0.064273  Not rejected
# C1R_DQrep5_HLA-II  0.000000  1.000000  Not rejected
# C1R_DQrep6_HLA-II  1.211414  0.635877  Not rejected
# C1R_DRrep1_HLA-II  1.661536  0.135397  Not rejected
# C1R_DRrep2_HLA-II  1.595690  0.508589  Not rejected
# C1R_DRrep3_HLA-II  1.437394  0.244591  Not rejected
# C1R_DRrep4_HLA-II  1.616198  0.022783      Rejected
# C1R_DRrep5_HLA-II  1.278510  0.426078  Not rejected
# C1R_DRrep6_HLA-II  1.377790  0.013974      Rejected
# C1R_DRrep7_HLA-II  2.142400  0.000006      Rejected
#

### with q-value filter of 0.05 ###
# >>> comp_motif_stat
#                    oddRatio   p-value            H0
# Sample Name
# C1R_DPrep1_HLA-II  1.341365  0.662732  Not rejected
# C1R_DPrep2_HLA-II  0.000000  0.589986  Not rejected
# C1R_DPrep3_HLA-II  2.692810  0.095013  Not rejected
# C1R_DPrep4_HLA-II  0.492621  0.704667  Not rejected
# C1R_DPrep5_HLA-II  0.500000  1.000000  Not rejected
# C1R_DQrep1_HLA-II  6.126531  0.014349      Rejected
# C1R_DQrep2_HLA-II  4.062212  0.067746  Not rejected
# C1R_DQrep3_HLA-II  1.890000  0.454558  Not rejected
# C1R_DQrep4_HLA-II       inf  0.071823  Not rejected
# C1R_DQrep5_HLA-II  0.000000  1.000000  Not rejected
# C1R_DQrep6_HLA-II  0.908366  1.000000  Not rejected
# C1R_DRrep1_HLA-II  2.781813  0.092751  Not rejected
# C1R_DRrep2_HLA-II  7.978448  0.211061  Not rejected
# C1R_DRrep3_HLA-II  1.762771  0.620366  Not rejected
# C1R_DRrep4_HLA-II  3.104253  0.000754      Rejected
# C1R_DRrep5_HLA-II  1.673508  0.317167  Not rejected
# C1R_DRrep6_HLA-II  1.459465  0.134221  Not rejected
# C1R_DRrep7_HLA-II  2.551121  0.004656      Rejected
